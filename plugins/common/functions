#!/usr/bin/env bash
set -eo pipefail; [[ $CREW_TRACE ]] && set -x

has_tty() {
  if [[ "$(/usr/bin/tty || true)" == "not a tty" ]]; then
    return 1
  else
    return 0
  fi
}

crew_log_info1() {
  echo "-----> $@"
}

crew_log_info2() {
  echo "=====> $@"
}

crew_log_info1_quiet() {
  if [[ -z "$CREW_QUIET_OUTPUT" ]];then
    echo "-----> $@"
  else
    return 0
  fi
}

crew_log_info2_quiet() {
  if [[ -z "$CREW_QUIET_OUTPUT" ]];then
    echo "=====> $@"
  else
    return 0
  fi
}

crew_col_log_info1() {
  printf "%-25s %-25s %-25s %-25s\n" "-----> $@"
}

crew_col_log_info1_quiet() {
  if [[ -z "$CREW_QUIET_OUTPUT" ]];then
    printf "%-25s %-25s %-25s %-25s\n" "-----> $@"
  else
    return 0
  fi
}

crew_col_log_info2() {
  printf "%-25s %-25s %-25s %-25s\n" "=====> $@"
}

crew_col_log_info2_quiet() {
  if [[ -z "$CREW_QUIET_OUTPUT" ]];then
    printf "%-25s %-25s %-25s %-25s\n" "=====> $@"
  else
    return 0
  fi
}

crew_col_log_msg() {
  printf "%-25s %-25s %-25s %-25s\n" "$@"
}

crew_col_log_msg_quiet() {
  if [[ -z "$CREW_QUIET_OUTPUT" ]];then
    printf "%-25s %-25s %-25s %-25s\n" "$@"
  else
    return 0
  fi
}

crew_log_verbose_quiet() {
  if [[ -z "$CREW_QUIET_OUTPUT" ]];then
    echo "       $@"
  else
    return 0
  fi
}

crew_log_verbose() {
  echo "       $@"
}

crew_log_warn() {
  echo " !    $@"
}

crew_log_fail() {
  echo "$@" 1>&2
  exit 1
}

crew_log_event() {
  logger -t crew -i -- "$@"
}

crew_log_pluginhook_call() {
  local l_hook

  l_hook="$1" ; shift
  crew_log_event "INVOKED: ${l_hook}( $@ )"
}

crew_container_log_verbose_quiet() {
  CID=$1;
  shift

  OIFS=$IFS
  IFS=$'\n'
  for line in $(docker logs $CID 2>&1); do
    crew_log_verbose_quiet "$line"
  done
  IFS=$OIFS
}

verify_app_name() {
  local APP="$1"
  [[ ! -n "$APP" ]] && crew_log_fail "(verify_app_name) APP must not be null"
  [[ ! -d "$CREW_ROOT/$APP" ]] && crew_log_fail "App $APP does not exist"
  IMAGE="crew/$APP"
  return 0
}

verify_image() {
  local IMAGE="$1"
  CREW_APP_IMAGES=$(docker images -q $IMAGE)
  if [[ -n "$CREW_APP_IMAGES" ]]; then
    return 0
  else
    return 1
  fi
}

is_number() {
  local NUMBER=$1; local NUM_RE='^[0-9]+$'
  if [[ $NUMBER =~ $NUM_RE ]];then
    return 0
  else
    return 1
  fi
}

parse_args() {
  for arg in "$@"; do
    case "$arg" in
      --quiet)
        export CREW_QUIET_OUTPUT=1
        ;;
      --trace)
        export CREW_TRACE=1
        ;;
      --rm-container|--rm)
        export CREW_RM_CONTAINER=1
        ;;
      --force)
        export CREW_APPS_FORCE_DELETE=1
        ;;
    esac
  done
  return 0
}

copy_from_image() {
  local IMAGE="$1"; local SRC_FILE="$2"; local DST_DIR="$3"; verify_app_name $APP

  if verify_image "$IMAGE"; then
    CID=$(docker run -d $IMAGE bash)
    docker cp "$CID:$SRC_FILE" "$DST_DIR"
    docker rm -f "$CID" &> /dev/null
  else
    return 1
  fi
}

get_app_container_ids() {
  APP="$1"
  verify_app_name $APP
  [[ -f $CREW_ROOT/$APP/CONTAINER ]] && CREW_CIDS+=$(< $CREW_ROOT/$APP/CONTAINER)

  shopt -s nullglob
  for CREW_CID_FILE in $CREW_ROOT/$APP/CONTAINER.*; do
    CREW_CIDS+=" "
    CREW_CIDS+=$(< $CREW_CID_FILE)
    CREW_CIDS+=" "
  done
  shopt -u nullglob
  echo $CREW_CIDS
}

get_dockerfile_exposed_port() {
  local DOCKERFILE_PORT=$(grep "^EXPOSE \+[[:digit:]]\+\(\/tcp\)\? *$" $1 | head -1 | sed 's/EXPOSE \+\([[:digit:]]\+\)\(\/tcp\)\?.*/\1/' || true)
  echo "$DOCKERFILE_PORT"
}

get_app_running_container_ids() {
  local APP=$1
  verify_app_name $APP

  ! (is_deployed $APP) && crew_log_fail "App $APP has not been deployed"
  local CIDS=$(get_app_container_ids $APP)

  for CID in $CIDS;do
    local APP_CONTAINER_STATUS=$(docker inspect -f '{{.State.Running}}' "$CID" || true)
    [[ "$APP_CONTAINER_STATUS" == "true" ]] && local APP_RUNNING_CONTAINER_IDS+="$CID "
  done

  echo "$APP_RUNNING_CONTAINER_IDS"
}

is_deployed() {
  APP="$1"
  if [[ -f "$CREW_ROOT/$APP/CONTAINER" ]] || [[ $(ls $CREW_ROOT/$APP/CONTAINER.* &> /dev/null; echo $?) -eq 0 ]];then
    return 0
  else
    return 1
  fi
}

is_container_running () {
  local CID=$1
  local CONTAINER_STATUS=$(docker inspect -f '{{.State.Running}}' "$CID" || true)

  if [[ "$CONTAINER_STATUS" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

is_app_running() {
  local APP="$1"
  verify_app_name $APP

  local APP_RUNNING_CONTAINER_IDS=$(get_app_running_container_ids $APP)

  if [[ -n "$APP_RUNNING_CONTAINER_IDS" ]]; then
    return 0
  else
    return 1
  fi
}
