#!/usr/bin/env bash
set -eo pipefail; [[ $CREW_TRACE ]] && set -x
source "$(dirname $0)/../common/functions"

release_and_deploy() {
  source "$(dirname $0)/../common/functions"
  local APP="$1"; local IMAGE="crew/$APP"

  if verify_image "$IMAGE"; then
    IMAGE_SOURCE_TYPE="dockerfile"

    crew_log_info1 "Releasing $APP ..."
    crew release "$APP" "$IMAGE_SOURCE_TYPE"
    crew_log_info1 "Deploying $APP ..."
    crew deploy "$APP"
    crew_log_info2 "Application deployed!"
  fi
}

generate_scale_file() {
  local APP="$1"; local IMAGE="crew/$APP"; local CREW_SCALE_FILE="$CREW_ROOT/$APP/CREW_SCALE"
  copy_from_image "$IMAGE" "/app/CREW_SCALE" "$CREW_ROOT/$APP" 2>/dev/null || true
  if [[ ! -f $CREW_SCALE_FILE ]]; then
    crew_log_info1_quiet "CREW_SCALE not found in app image. Defaulting to a single process"
    echo "worker=1" >> $CREW_SCALE_FILE

    crew_log_info1_quiet "New CREW_SCALE file generated"
    while read line || [ -n "$line" ]
    do
      crew_log_info2_quiet "$line"
    done < "$CREW_SCALE_FILE"
  fi
}

set_scale() {
  local APP="$1"; local CREW_SCALE_FILE="$CREW_ROOT/$APP/CREW_SCALE"
  shift 1
  local SCALE_SETTINGS=("$@")
  for procscale in "${SCALE_SETTINGS[@]}"; do
    PROC_NAME=${procscale%%=*}
    PROC_COUNT=${procscale#*=}
    is_number $PROC_COUNT || crew_log_fail "ps:scale $PROC_COUNT is not a number"
    crew_log_info1_quiet "Scaling $APP:$PROC_NAME to $PROC_COUNT"
    if (egrep -q ^${PROC_NAME}= $CREW_SCALE_FILE > /dev/null 2>&1);then
      sed --in-place "s:^${PROC_NAME}=.*:$PROC_NAME=$PROC_COUNT:g" $CREW_SCALE_FILE
    else
      echo "$PROC_NAME=$PROC_COUNT" >> $CREW_SCALE_FILE
    fi
  done
}

